#!/usr/bin/env python

import os
import glob
import re

mapPath = "map/"
srcPath = "src/"

filePaths = glob.glob(mapPath+"*.area")

areasHpp = "// Generated by genAreas.py\n\n#ifndef areas_hpp\n#define areas_hpp\n\n#include \"area.hpp\"\n\n"
areasCpp = "// Generated by genAreas.py\n\n#include \"areasHelper.hpp\"\n\n"

areasCppAfter = "";

areaCount = 0
allAreas = ""

for filePath in filePaths:
    file = open(filePath, "r")

    lines = file.readlines()

    file.close()

    li = 0

    header = lines[li];
    if not header.startswith("/* BEGIN AREA "):
        print("Expected: /* BEGIN AREA in " + filePath)
        continue
    name = header[14:-1]

    li += 1

    tileSymbols = ("".join(lines[li:li+16])).replace("\n", "")
    li += 16
    tileTypes = ("".join(lines[li:li+16])).replace("\n", "")
    li += 16
    tileColors = ("".join(lines[li:li+16])).replace("\n", "")
    li += 16

    portalAreas = {}

    while not lines[li].startswith("*/"):
        key = lines[li][0]
        val = lines[li][2:-1]
        portalAreas[key] = "area" + val
        li += 1

    onUpdate = ""
    onEnter = ""
    onLeave = ""

    addingToOnUpdate = False
    addingToOnEnter = False
    addingToOnLeave = False

    for line in lines[li:]:
        if line.startswith("void onUpdate"):
            addingToOnUpdate = True
            onUpdate = "\n"
            continue
        elif line.startswith("void onEnter"):
            addingToOnEnter = True
            onEnter = "\n"
            continue
        elif line.startswith("void onLeave"):
            addingToOnLeave = True
            onLeave = "\n"
            continue
        elif line.startswith("}"):
            addingToOnUpdate = False
            addingToOnEnter = False
            addingToOnLeave = False
            continue

        if addingToOnUpdate:
            onUpdate += line

        if addingToOnEnter:
            onEnter += line

        if addingToOnLeave:
            onLeave += line

    points = {}
    allPoints = []

    areasHpp += "extern Area* area" + name + ";\n"

    areasCpp += "Tile areaTiles" + name + "[areaW*areaH] = {"
    for i,(s,t,c) in enumerate(zip(tileSymbols, tileTypes, tileColors)):
        if s == "\\" or s == "'" :
            s = "\\"+s

        tt = "0"
        if t == ".":
            tt = "0"
        elif t == "#":
            tt = "1"
        elif t.islower():
            tt = "0"
            points[t] = i;
            allPoints.append({"sym":t, "pos":i});

        cc = "0xF"
        if c == "K":
            cc = "0"
        elif c == "R":
            cc = "1"
        elif c == "G":
            cc = "2"
        elif c == "Y":
            cc = "3"
        elif c == "B":
            cc = "4"
        elif c == "M":
            cc = "5"
        elif c == "C":
            cc = "6"
        elif c == "W":
            cc = "7"
        elif c == "k":
            cc = "8"
        elif c == "r":
            cc = "9"
        elif c == "g":
            cc = "10"
        elif c == "y":
            cc = "11"
        elif c == "b":
            cc = "12"
        elif c == "m":
            cc = "13"
        elif c == "c":
            cc = "14"
        elif c == "w":
            cc = "15"

        areasCpp += "{'" + s + "'," + tt + "," + cc + "},";

    areasCpp = areasCpp[:-1] # to remove the last comma
    areasCpp += "};\n"

    portalCount = str(len(portalAreas))
    areasHpp += "extern Portal portals" + name + "[" + portalCount + "];\n";
    areasCppAfter += "Portal portals" + name + "[" + portalCount + "] = {"

    for key in portalAreas:
        if key == 'N' or key == 'S' or key == 'E' or key == 'W':
            areasCppAfter += "Portal('" + key + "',PORTAL_POS_" + key + "," + portalAreas[key] + "),"
        else:
            areasCppAfter += "Portal('" + key + "'," + str(points[key]) + "," + portalAreas[key] + "),"

    areasCppAfter = areasCppAfter[:-1] # to remove the last comma
    areasCppAfter += "};\n"

    areasCpp += "void onUpdateArea" + name + "(){" + onUpdate + "}\n"
    areasCpp += "void onEnterArea" + name + "(char sym){" + onEnter + "}\n"
    areasCpp += "void onLeaveArea" + name + "(char sym){" + onLeave + "}\n"

    poiCountInt = 0
    pois = "{"
    for p in allPoints:
        key = p["sym"];
        val = p["pos"];
        if not (key in portalAreas):
            pois += "Poi('" + key + "'," + str(val) + "),"
            poiCountInt += 1
    if poiCountInt > 1:
        pois = pois[:-1] # to remove the last comma
    pois += "}"

    poiCount = str(poiCountInt)

    areasCpp += "Poi pois" + name + "[" + poiCount + "] = " + pois + ";\n"

    areasCpp += "Area* area" + name + " = new Area(" + str(areaCount) + ", \"" + name + "\", areaTiles" + name + ", " + portalCount + ", portals" + name + ", " + poiCount + ", pois" + name + ", onUpdateArea" + name + ", onEnterArea" + name + ", onLeaveArea" + name + ");\n\n"

    allAreas += "area" + name + ","
    areaCount += 1


allAreas = allAreas[:-1]

areasCpp += "Area* allAreas[" + str(areaCount) + "] = {" + allAreas + "};\n\n";

areasCpp += areasCppAfter;

areasHpp += "\nextern Area* allAreas[" + str(areaCount) + "];\n"
areasHpp += "\n#endif\n"



file = open(srcPath+"areas.hpp", "w")
file.write(areasHpp)
file.close()

file = open(srcPath+"areas.cpp", "w")
file.write(areasCpp)
file.close()
